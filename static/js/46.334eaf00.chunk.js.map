{"version":3,"sources":["components/AppLoaderFrame/AppLoaderFrame.test.js","setupTests.js"],"names":["describe","shallow","instance","mockSetState","jest","fn","mock","useState","initial","navigation","it","window","localStorage","setItem","JSON","stringify","component","mount","id","classname","expect","prop","toBe","removeItem","test","location","pathname","find","configure","adapter","Adapter","localStorageMock","getItem","clear","global","setTimeout"],"mappings":"8HAAA,iFAsBAA,SAAS,mCAAkC,WACvBC,kBAAQ,cAAC,UAAc,KACdC,WADzB,IAGMC,EAAeC,KAAKC,KAE1BD,KAAKE,KAAK,SAAS,iBAAO,CACxBC,SAAU,SAAAC,GAAO,MAAI,CAACA,EAASL,EAAa,EAC7C,IAED,IAAMM,EAAW,CACf,CACI,GAAK,YACL,KAAQ,kBACR,KAAQ,oBACR,KAAQ,eACR,KAAQ,oEACR,KAAO,mBACP,SAAW,cACX,WAAa,OACb,SAAW,EACX,cAAe,EACf,YAAa,EACb,cAAgB,YAChB,WAAa,SAGf,CACE,GAAK,aACL,KAAQ,cACR,KAAQ,gBACR,KAAQ,iBACR,KAAQ,oFACR,KAAO,eACP,SAAW,cACX,WAAa,OACb,cAAgB,YAChB,SAAW,EACX,YAAa,IAInBC,GAAG,qCAAoC,WACrCC,OAAOC,aAAaC,QAAQ,aAAaC,KAAKC,UAAUN,IACtD,IAAMO,EAAYC,gBAAM,cAAC,UAAc,CAACC,GAAG,aAAaC,UAAU,gBAClEC,OAAOJ,EAAUK,KAAK,OAAOC,KAAK,cAClCX,OAAOC,aAAaW,WAAW,aACnC,IAEAC,KAAK,6BAA6B,kBACzBb,OAAOc,SACdd,OAAOc,SAAW,CAAEC,SAAU,SAC9Bf,OAAOC,aAAaC,QAAQ,aAAaC,KAAKC,UAAUN,IACxD,IAAMO,EAAYC,gBAAM,cAAC,UAAc,CAACC,GAAG,aAAaC,UAAU,gBAClEC,OAAOJ,EAAUW,KAAK,UAAUN,KAAK,UAAUC,KAAK,aACpDX,OAAOC,aAAaW,WAAW,aACjC,GAgKJ,G,wDC9OA,2CAgBAK,oBAAU,CAAEC,QAAS,IAAIC,MAEzB,IAAMC,EAAmB,CACrBC,QAAS5B,KAAKC,KACdQ,QAAST,KAAKC,KACd4B,MAAO7B,KAAKC,MAEd6B,EAAOtB,aAAemB,EACtB3B,KAAK+B,WAAW,I","file":"static/js/46.334eaf00.chunk.js","sourcesContent":["/* \r\n *  *************************************************\r\n *   BH [Highly] Confidential\r\n *   [Unpublished] Copyright 2020.  Baker Hughes\r\n *  \r\n *   NOTICE:  All information contained herein is, and remains the property of Baker Hughes, and/or\r\n *   its affiliates.  The intellectual and technical concepts contained herein are proprietary to Baker Hughes\r\n *   and/or its affiliates and may be covered by patents, copyrights, and/or trade secrets.  Dissemination of this information or\r\n *   reproduction of this material is strictly forbidden unless prior written permission is obtained from Baker Hughes.\r\n *  **************************************************\r\n *  \r\n */\r\n\r\nimport React from 'react';\r\nimport {create} from 'react-test-renderer';\r\nimport AppLoaderFrame  from './AppLoaderFrame';\r\nimport { MemoryRouter } from \"react-router-dom\";\r\nimport Frame, { FrameContextConsumer } from 'react-frame-component';\r\nimport {shallow,mount,render} from 'enzyme';\r\nimport '../../setupTests';\r\nimport ReactDOM from 'react-dom';\r\nimport { fireEvent } from '@testing-library/react';\r\ndescribe('AppLoaderFrame non routable App',()=>{\r\n    const wrapper = shallow(<AppLoaderFrame />)\r\n    const instance = wrapper.instance();\r\n\r\n    const mockSetState = jest.fn();\r\n\r\n    jest.mock('react', () => ({\r\n      useState: initial => [initial, mockSetState]\r\n    }));\r\n\r\n    const navigation=[\r\n      {\r\n          \"id\":\"dashboard\",\r\n          \"name\": \"Asset Dashboard\",\r\n          \"link\": \"/asset-dashboard/\",\r\n          \"icon\": \"speedrounded\",\r\n          \"host\": \"https://ofe-dev-nginx-lb01-1933176829.us-west-2.elb.amazonaws.com\",\r\n          \"path\":\"/asset-dashboard\",\r\n          \"template\":\"/index.html\",\r\n          \"navService\":\"/nav\",\r\n          \"default\": true,\r\n          \"feedbackFlag\":true,\r\n          \"visibility\":true,\r\n          \"displayTextId\":\"dashboard\",\r\n          \"menuItemId\":'cases'\r\n        },\r\n        \r\n        {\r\n          \"id\":\"appbuilder\",\r\n          \"name\": \"App Builder\",\r\n          \"link\": \"/app-builder/\",\r\n          \"icon\": \"warningrounded\",\r\n          \"host\": \"https://cde-sc-nginx-dev01-elb01-238862697.us-west-2.elb.amazonaws.com/appbuilder\",\r\n          \"path\":\"/app-builder\",\r\n          \"template\":\"/index.html\",\r\n          \"navService\":\"/nav\",\r\n          \"displayTextId\":\"dashboard\",\r\n          \"default\": false,\r\n          \"visibility\":false\r\n        }\r\n    \r\n    ];\r\n    it('verify props are getting assigned',()=>{\r\n      window.localStorage.setItem('navigation',JSON.stringify(navigation));\r\n        const component = mount(<AppLoaderFrame id=\"appbuilder\" classname=\"appbuilder\" />);\r\n        expect(component.prop('id')).toBe(\"appbuilder\");\r\n        window.localStorage.removeItem('navigation');\r\n    });\r\n\r\n    test('Can increment from 1 to 2', () => {\r\n      delete window.location;\r\n      window.location = { pathname: '/test' };\r\n      window.localStorage.setItem('navigation',JSON.stringify(navigation));\r\n      const component = mount(<AppLoaderFrame id=\"appbuilder\" classname=\"appbuilder\" />);\r\n      expect(component.find('iframe').prop('title')).toBe(\"app-frame\");\r\n      window.localStorage.removeItem('navigation');\r\n    });\r\n\r\n    // test('navigation null', () => {\r\n    //   window.location =  '/appshell/';\r\n    //   window.location = { pathname: '/appshell' }\r\n    //   window.localStorage.setItem('navigation', JSON.stringify(\"null\"));\r\n    //   const component = mount(<AppLoaderFrame id=\"appbuilder\" classname=\"appbuilder\" />);\r\n    //   expect(component.find('iframe').prop('title')).toBe(\"app-frame\");\r\n    // });\r\n\r\n    /*\r\n    it('verify inital state',()=>{\r\n      \r\n        const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n        expect(component.state().htmlContent).toBe('');\r\n        expect(component.state().loading).toBeTruthy();\r\n        expect(component.state().navcontext).toBe(\"{}\");\r\n    });\r\n\r\n    it('verify when error thrown in call-api call',(done)=>{\r\n          const mockSuccessResponse = {\r\n            status: 403,\r\n        };\r\n          const obj =  {\r\n            pathname:\"/dummy\",\r\n            method:\"POST\",\r\n            state:{detail:\"data\"}\r\n        };\r\n          const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n          const mockFetchPromise = Promise.resolve({ \r\n            json: () => mockJsonPromise,\r\n            status:403\r\n          });\r\n          jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n        const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n                          onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n      \r\n        window.postMessage = jest.fn();    \r\n        component.instance().getFramePage(obj);\r\n        process.nextTick(() => {\r\n            expect(global.fetch).toHaveBeenCalled();\r\n            expect(window.postMessage).toBeCalled();\r\n             global.fetch.mockClear();\r\n            done();\r\n          });\r\n    });\r\n\r\n    it('verify htmlContent state after api call',(done)=>{\r\n        const mockSuccessResponse = {\r\n          status: 200,\r\n          statusText: 'OK',\r\n          response: 'loading',\r\n          sendAsJson: false\r\n      };\r\n        const obj =  {\r\n          pathname:\"/dummy\",\r\n          method:\"POST\",\r\n          state:{detail:\"data\"}\r\n      };\r\n        const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n        const mockFetchPromise = Promise.resolve({ \r\n          json: () => mockJsonPromise,\r\n        });\r\n        jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n      const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n                        onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n    \r\n      component.instance().getFramePage(obj);\r\n      \r\n      process.nextTick(() => {\r\n          expect(global.fetch).toHaveBeenCalled();\r\n          expect(component.state().htmlContent).toBe('loading');\r\n           global.fetch.mockClear();\r\n          done();\r\n        });\r\n  });\r\n\r\n  it('verify when api call throws an error',(done)=>{\r\n    const mockSuccessResponse = undefined;\r\n    const obj =  {\r\n      pathname:\"/dummy\",\r\n      method:\"POST\",\r\n      state:{detail:\"data\"}\r\n  };\r\n    const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n    const mockFetchPromise = Promise.resolve({ \r\n      json: () => mockJsonPromise,\r\n      status: 200\r\n    });\r\n    jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n  const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n                    onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n\r\n    window.postMessage = jest.fn();    \r\n    component.instance().getFramePage(obj);\r\n    process.nextTick(() => {\r\n    expect(global.fetch).toHaveBeenCalled();\r\n    expect(window.postMessage).toBeCalled();\r\n    global.fetch.mockClear();\r\n    done();\r\n    });\r\n});\r\n\r\nit('verify handle response state',()=>{\r\n    const response = {\r\n        ok:true\r\n    }\r\n    const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n    var errorResponse = component.instance().handleErrors(response);\r\n    expect(errorResponse).toBe(response);\r\n});\r\n\r\nit('verify handle response state throws error',()=>{\r\n    const response = {\r\n        ok:false\r\n    }\r\n    const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n    expect(() => {\r\n        component.instance().handleErrors(response);\r\n      }).toThrow();\r\n});\r\n\r\nit('verify navcontext state getting changed or not',()=>{\r\n    window.contextPayload = \"contextPayload\";\r\n    const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n   \r\n    expect(component.state().navcontext).toBe(\"contextPayload\");\r\n});\r\n\r\nit('verify getFramePage has been called',()=>{\r\n      const frameMounted = jest.fn();\r\n      var el = document.createElement('div');\r\n      el.id = \"divid\";\r\n      document.body.appendChild(el);\r\n      var props ={\r\n        onFrameMessage : jest.fn()\r\n      }\r\n      const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"jest.fn()\" pageentry=\"/\" \r\n      contentDidMount={frameMounted}/>,\r\n      { attachTo: el });\r\n      component.state().importurl = \"/asset-holder/\";\r\n      const getFramePage = jest.spyOn(component.instance(), 'getFramePage')\r\n      component.instance().componentDidUpdate({url:\"/asset-holder1/\"});\r\n      expect(getFramePage).toHaveBeenCalled();\r\n  });\r\n  it('verify context set to frames window and send message to microapps',() => {\r\n    const frameMounted = jest.fn();\r\n    var el = document.createElement('div');\r\n      el.id = \"divid\";\r\n      document.body.appendChild(el);\r\n      window.getContext = ()=>{return {'context' : {'message':'share context'}}};\r\n    const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" \r\n    contentDidMount={frameMounted}/>,\r\n    { attachTo: el });\r\n    window.getContext = ()=>{return {'context' : {'message':'share context'}}};\r\n    component.instance().handleFrameMessage('Message');\r\n    component.state().importurl = \"/asset-holder/\";\r\n    component.instance().componentDidUpdate(\"/asset-holder1/\");\r\n  });*/\r\n\r\n});","/* \r\n *  *************************************************\r\n *   BH [Highly] Confidential\r\n *   [Unpublished] Copyright 2020.  Baker Hughes\r\n *  \r\n *   NOTICE:  All information contained herein is, and remains the property of Baker Hughes, and/or\r\n *   its affiliates.  The intellectual and technical concepts contained herein are proprietary to Baker Hughes\r\n *   and/or its affiliates and may be covered by patents, copyrights, and/or trade secrets.  Dissemination of this information or\r\n *   reproduction of this material is strictly forbidden unless prior written permission is obtained from Baker Hughes.\r\n *  **************************************************\r\n *  \r\n */\r\n\r\nimport { configure } from 'enzyme';\r\nimport Adapter from 'enzyme-adapter-react-16';\r\n// import Adapter from '@wojtekmaj/enzyme-adapter-react-17'; //TODO: upgrade to official version once available\r\nconfigure({ adapter: new Adapter() });\r\n\r\nconst localStorageMock = {\r\n    getItem: jest.fn(),\r\n    setItem: jest.fn(),\r\n    clear: jest.fn()\r\n  };\r\n  global.localStorage = localStorageMock;\r\n  jest.setTimeout(30000);"],"sourceRoot":""}