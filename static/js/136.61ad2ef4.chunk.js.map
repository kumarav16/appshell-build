{"version":3,"sources":["../node_modules/@baker-hughes-central-design/ui-toolkit/dist/esm/bh-status-indicator.entry.js"],"names":["BhStatusIndicator","hostRef","registerInstance","this","position","theme","offset","color","console","warn","h","Host","class","isFluid","size","style","backgroundColor"],"mappings":"sNAIMA,EAAiB,WACrB,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GAIvBE,KAAKC,SAAW,aAIhBD,KAAKE,MAAQ,UAIbF,KAAKG,OAAS,OAChB,CAoCC,OApCA,gDACD,WACE,GAAIH,KAAKI,MAEP,OADAC,QAAQC,KAAK,sIACLN,KAAKI,OACX,IAAK,OACHJ,KAAKE,MAAQ,UACb,MACF,IAAK,OACHF,KAAKE,MAAQ,QACb,MACF,IAAK,SACHF,KAAKE,MAAQ,SACb,MACF,IAAK,OACHF,KAAKE,MAAQ,UAIrB,GAAC,oBACD,WACE,OAAQK,YAAEC,IAAM,CAAEC,MAAO,uBAAF,OAA2C,aAAlBT,KAAKC,SAAuB,UACnED,KAAKU,QAAU,iBAAmB,YACrC,KAA0B,aAAlBV,KAAKC,UAA2BM,YAAE,OAAQ,MAAOA,YAAE,MAAO,CAAEE,MAAO,kCAAF,OAAoCT,KAAKC,SAAQ,oBAAYD,KAAKG,SAAYI,YAAE,MAAO,CAAEE,MAAO,8BAAF,OAAgCT,KAAKW,KAAI,YAAmB,YAAfX,KAAKE,OAC5M,UAAfF,KAAKE,OACU,YAAfF,KAAKE,OACU,WAAfF,KAAKE,MACHF,KAAKE,MACL,IAAMU,MAAO,CACfC,gBAAgC,YAAfb,KAAKE,OACL,UAAfF,KAAKE,OACU,YAAfF,KAAKE,OACU,WAAfF,KAAKE,MACH,GAAE,UACCF,KAAKE,WAElB,KAAC,EAnDoB,GAqDvBL,EAAkBe,MAvDW,kmC","file":"static/js/136.61ad2ef4.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-c0304f12.js';\n\nconst bhStatusIndicatorCss = \".bh-status-indicator{position:relative;display:table}.bh-status-indicator.appended-fluid{display:block}.bh-status-indicator__container{display:flex;align-items:center}.bh-status-indicator__container.appended{position:absolute;top:4px;right:0}.bh-status-indicator__container.appended.offset--none{top:0}.bh-status-indicator__container.appended.offset--small{top:4px}.bh-status-indicator__container.appended>.bh-status-indicator__badge{box-shadow:0px 0px 0px 1px var(--color-fill-common-primary)}.bh-status-indicator__badge{width:12px;height:12px;border-radius:50%}.bh-status-indicator__badge.xsmall{width:4px;height:4px}.bh-status-indicator__badge.small{width:8px;height:8px}.bh-status-indicator__badge.success{background-color:var(--color-fill-semantic-success-default)}.bh-status-indicator__badge.error{background-color:var(--color-fill-semantic-error-default)}.bh-status-indicator__badge.warning{background-color:var(--color-fill-semantic-warning-default)}.bh-status-indicator__badge.accent{background-color:var(--color-fill-semantic-accent-default)}.bh-status-indicator__label{margin-left:var(--spacing-margin-small)}\";\n\nconst BhStatusIndicator = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    /**\r\n     * Valid positions are: 'standalone' | 'appended', default is 'standalone'. Defines if the status-indicator is standalone, or appended to an element\r\n     */\r\n    this.position = 'standalone';\r\n    /**\r\n     * Valid options are: 'teal' | 'earth' | 'rose' | 'purple', default is 'teal'. Defines the color theme of status-indicator appearance.\r\n     */\r\n    this.theme = 'success';\r\n    /**\r\n     * Defines status-indicator offset - valid options are \"medium\" (12px) | \"small\" (6px). Works only when the position is set to \"appended\"\r\n     */\r\n    this.offset = 'small';\r\n  }\r\n  componentWillRender() {\r\n    if (this.color) {\r\n      console.warn('bh-status-indicator: Prop \"color\" is deprecated and will not be supported in the future releases. Please use \"theme\" prop instead.');\r\n      switch (this.color) {\r\n        case 'teal':\r\n          this.theme = 'success';\r\n          break;\r\n        case 'rose':\r\n          this.theme = 'error';\r\n          break;\r\n        case 'purple':\r\n          this.theme = 'accent';\r\n          break;\r\n        case 'gold':\r\n          this.theme = 'warning';\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (h(Host, { class: `bh-status-indicator ${this.position === 'appended'\r\n        ? `${this.isFluid ? 'appended-fluid' : 'appended'}`\r\n        : ''}` }, this.position === 'appended' && h(\"slot\", null), h(\"div\", { class: `bh-status-indicator__container ${this.position} offset--${this.offset}` }, h(\"div\", { class: `bh-status-indicator__badge ${this.size} ${this.theme === 'success' ||\r\n        this.theme === 'error' ||\r\n        this.theme === 'warning' ||\r\n        this.theme === 'accent'\r\n        ? this.theme\r\n        : ''}`, style: {\r\n        backgroundColor: this.theme === 'success' ||\r\n          this.theme === 'error' ||\r\n          this.theme === 'warning' ||\r\n          this.theme === 'accent'\r\n          ? ''\r\n          : `${this.theme}`,\r\n      } }))));\r\n  }\r\n};\r\nBhStatusIndicator.style = bhStatusIndicatorCss;\n\nexport { BhStatusIndicator as bh_status_indicator };\n"],"sourceRoot":""}