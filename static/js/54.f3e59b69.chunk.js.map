{"version":3,"sources":["components/TestHolder.test.js","setupTests.js"],"names":["jest","mock","withTranslation","Component","defaultProps","t","key","describe","shallow","instance","it","component","url","payload","onFrameMessage","pageentry","expect","toMatchSnapshot","mount","prop","toBe","state","htmlContent","loading","toBeTruthy","navcontext","toEqual","configure","adapter","Adapter","localStorageMock","getItem","fn","setItem","clear","global","localStorage","setTimeout"],"mappings":"0NAsBAA,KAAKC,KAAK,iBAAiB,iBAAO,CAChCC,gBAAiB,kBAAM,SAACC,GAEpB,OADAA,EAAUC,aAAY,2BAAOD,EAAUC,cAAY,IAAEC,EAAG,SAACC,GAAG,OAAKA,CAAG,IAC7DH,CACT,CAAC,EACJ,IACDI,SAAS,gBAAe,WAEJC,kBAAQ,cAAC,IAAW,KACXC,WAEzBC,GAAG,YAAW,WACV,IAAMC,EAAYH,kBAAQ,cAAC,IAAW,CAAEI,IAAI,iBAAiBC,QAAQ,KAAKC,eAAgB,oBAAoBC,UAAU,OAExHC,OAAOL,GAAWM,iBAEtB,IAEAP,GAAG,kCAAiC,WAChC,IAAMC,EAAYO,gBAAM,cAAC,IAAW,CAAEN,IAAI,iBAAiBC,QAAQ,KAAKC,eAAgB,oBAAoBC,UAAU,OAGtHC,OAAOL,EAAUQ,KAAK,YAAYC,KAAK,MACvCJ,OAAOL,EAAUQ,KAAK,cAAcC,KAAK,KACzCJ,OAAOL,EAAUQ,KAAK,mBAAmBC,KAAK,oBAClD,IAIAV,GAAG,uBAAsB,WAErB,IAAMC,EAAYO,gBAAM,cAAC,IAAW,CAAEN,IAAI,iBAAiBC,QAAQ,KAAKC,eAAgB,oBAAoBC,UAAU,OACtHC,OAAOL,EAAUU,QAAQC,aAAaF,KAAK,IAC3CJ,OAAOL,EAAUU,QAAQE,SAASC,aAClCR,OAAOL,EAAUU,QAAQI,YAAYC,QAAQ,CAAC,MAClD,GAgMJ,G,wDCzPA,2CAgBAC,oBAAU,CAAEC,QAAS,IAAIC,MAEzB,IAAMC,EAAmB,CACrBC,QAAS/B,KAAKgC,KACdC,QAASjC,KAAKgC,KACdE,MAAOlC,KAAKgC,MAEdG,EAAOC,aAAeN,EACtB9B,KAAKqC,WAAW,I","file":"static/js/54.f3e59b69.chunk.js","sourcesContent":["/* \r\n *  *************************************************\r\n *   BH [Highly] Confidential\r\n *   [Unpublished] Copyright 2020.  Baker Hughes\r\n *  \r\n *   NOTICE:  All information contained herein is, and remains the property of Baker Hughes, and/or\r\n *   its affiliates.  The intellectual and technical concepts contained herein are proprietary to Baker Hughes\r\n *   and/or its affiliates and may be covered by patents, copyrights, and/or trade secrets.  Dissemination of this information or\r\n *   reproduction of this material is strictly forbidden unless prior written permission is obtained from Baker Hughes.\r\n *  **************************************************\r\n *  \r\n */\r\n\r\nimport React from 'react';\r\nimport {create} from 'react-test-renderer';\r\nimport FrameHolder  from '../frame/FrameHolder';\r\nimport { MemoryRouter } from \"react-router-dom\";\r\nimport Frame, { FrameContextConsumer } from 'react-frame-component';\r\nimport {shallow,mount,render} from 'enzyme';\r\nimport '../setupTests';\r\nimport ReactDOM from 'react-dom';\r\nimport { fireEvent } from '@testing-library/react';\r\njest.mock(\"react-i18next\", () => ({\r\n  withTranslation: () => (Component) => {\r\n      Component.defaultProps = {...Component.defaultProps, t: (key) => key};\r\n      return Component;\r\n    },\r\n}));\r\ndescribe('Frame Holder',()=>{\r\n\r\n    const wrapper = shallow(<FrameHolder />)\r\n    const instance = wrapper.instance();\r\n\r\n    it('snapshot',()=>{\r\n        const component = shallow(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n       \r\n        expect(component).toMatchSnapshot();\r\n       \r\n    });\r\n\r\n    it('verify notification show state',()=>{\r\n        const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n       \r\n     //   expect(component.props().url).toBe(\"/asset-holder/\");\r\n        expect(component.prop('payload')).toBe(\"{}\");\r\n        expect(component.prop('pageentry')).toBe(\"/\");\r\n        expect(component.prop('onFrameMessage')).toBe(\"on frame message!\");\r\n    });\r\n\r\n\r\n    \r\n    it('verify inital state',()=>{\r\n      \r\n        const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n        expect(component.state().htmlContent).toBe('');\r\n        expect(component.state().loading).toBeTruthy();\r\n        expect(component.state().navcontext).toEqual([\"{}\"]);\r\n    });\r\n\r\n    // it('verify when error thrown in call-api call',(done)=>{\r\n    //       const mockSuccessResponse = {\r\n    //         status: 403,\r\n    //     };\r\n    //       const obj =  {\r\n    //         pathname:\"/dummy\",\r\n    //         method:\"POST\",\r\n    //         state:{detail:\"data\"}\r\n    //     };\r\n    //       const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n    //       const mockFetchPromise = Promise.resolve({ \r\n    //         json: () => mockJsonPromise,\r\n    //         status:403\r\n    //       });\r\n    //       jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n    //     const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n    //                       onFrameMessage =\"on frame message!\" pageentry=\"/\" />);\r\n      \r\n    //     window.postMessage = jest.fn();  \r\n    //     let t = (string) =>{ return string} \r\n    //     component.instance().getFramePage(obj,t);  \r\n    //     process.nextTick(() => {\r\n    //         expect(global.fetch).toHaveBeenCalled();\r\n    //         expect(window.postMessage).toBeCalled();\r\n    //          global.fetch.mockClear();\r\n    //         done();\r\n    //       });\r\n    // });\r\n\r\n//     it('verify htmlContent state after api call',(done)=>{\r\n//         const mockSuccessResponse = {\r\n//           status: 200,\r\n//           statusText: 'OK',\r\n//           response: 'loading',\r\n//           sendAsJson: false\r\n//       };\r\n//         const obj =  {\r\n//           pathname:\"/dummy\",\r\n//           method:\"POST\",\r\n//           state:{detail:\"data\"}\r\n//       };\r\n//         const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n//         const mockFetchPromise = Promise.resolve({ \r\n//           json: () => mockJsonPromise,\r\n//         });\r\n//         jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n//       const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n//                         onFrameMessage =\"on frame message!\" pageentry=\"/\" parentCallback={()=> {}}/>);\r\n//         let t = (string) =>{ return string} \r\n//  component.instance().getFramePage(obj,t);\r\n      \r\n//       process.nextTick(() => {\r\n//           expect(global.fetch).toHaveBeenCalled();\r\n//           expect(component.state().htmlContent).toBe('loading');\r\n//            global.fetch.mockClear();\r\n//           done();\r\n//         });\r\n//   });\r\n\r\n//   it('verify when api call throws an error',(done)=>{\r\n//     const mockSuccessResponse = undefined;\r\n//     const obj =  {\r\n//       pathname:\"/dummy\",\r\n//       method:\"POST\",\r\n//       state:{detail:\"data\"}\r\n//   };\r\n//     const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n//     const mockFetchPromise = Promise.resolve({ \r\n//       json: () => mockJsonPromise,\r\n//       status: 200\r\n//     });\r\n//     jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n//   const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" \r\n//                     onFrameMessage =\"on frame message!\" pageentry=\"/\" parentCallback={()=> {}}/>);\r\n\r\n//     window.postMessage = jest.fn();  \r\n//     let t = (string) =>{ return string} \r\n//     component.instance().getFramePage(obj,t);  \r\n//     process.nextTick(() => {\r\n//     expect(global.fetch).toHaveBeenCalled();\r\n//     expect(window.postMessage).toBeCalled();\r\n//     global.fetch.mockClear();\r\n//     done();\r\n//     });\r\n// });\r\n\r\n// it('verify handle response state',()=>{\r\n//     const response = {\r\n//         ok:true\r\n//     }\r\n//     const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" parentCallback={()=> {}} />);\r\n//     var errorResponse = component.instance().handleErrors(response);\r\n//     expect(errorResponse).toBe(response);\r\n// });\r\n\r\n// it('verify handle response state throws error',()=>{\r\n//     const response = {\r\n//         ok:false\r\n//     }\r\n//     const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage =\"on frame message!\" pageentry=\"/\" parentCallback={()=> {}} />);\r\n//     expect(() => {\r\n//         component.instance().handleErrors(response);\r\n//       }).toThrow();\r\n// });\r\n\r\n// it('verify navcontext state getting changed or not',()=>{\r\n//   window.contextPayload = \"contextPayload\";\r\n//   const obj =  {\r\n//     pathname:\"/dummy\",\r\n//     method:\"POST\",\r\n//     state:{detail:\"data\"}\r\n// };\r\n// const mockSuccessResponse = {\r\n//   status: 200,\r\n//   statusText: 'OK',\r\n//   response: 'loading',\r\n//   sendAsJson: false\r\n// };\r\n// const response = {\r\n//         ok:true\r\n//     }\r\n//   const ev= {'eventName':'click'};\r\n//   const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n//       const mockFetchPromise = Promise.resolve({ \r\n//         json: () => mockJsonPromise,\r\n//       });\r\n//       jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n\r\n//   const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" onFrameMessage={()=>{}} pageentry=\"/\" parentCallback={(ev)=> {}}/>);\r\n//   let t = (string) =>{ return string} \r\n//   component.instance().getFramePage(obj,t);\r\n//   var errorResponse = component.instance().handleErrors(response);\r\n//   expect(errorResponse).toBe(response);\r\n//   expect(component.state().navcontext).toBe(\"contextPayload\");\r\n// });\r\n\r\n// it('verify getFramePage has been called',()=>{\r\n//       const frameMounted = jest.fn();\r\n//       const mockSuccessResponse = {\r\n//         status: 200,\r\n//         statusText: 'OK',\r\n//         response: 'loading',\r\n//         sendAsJson: false\r\n//     };\r\n//       var el = document.createElement('div');\r\n//       el.id = \"divid\";\r\n//       document.body.appendChild(el);\r\n//       var props ={\r\n//         onFrameMessage : jest.fn()\r\n//       }\r\n//       const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n//         const mockFetchPromise = Promise.resolve({ \r\n//           json: () => mockJsonPromise,\r\n//         });\r\n//     localStorage.setItem('sessionTimeOut',\"true\");\r\n//     jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n//       const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" pageentry=\"/\" \r\n//       parentCallback={()=> {}} onFrameMessage={()=>{}}/>,\r\n//       { attachTo: el });\r\n//       component.state().importurl = \"/asset-holder/\";\r\n//       const getFramePage = jest.spyOn(component.instance(), 'getFramePage')\r\n//       component.instance().componentDidUpdate({url:\"/asset-holder/\"});\r\n//       //expect(getFramePage).toHaveBeenCalled();\r\n//   });\r\n  // it('verify context set to frames window and send message to microapps',() => {\r\n  //   const frameMounted = jest.fn();\r\n  //   const mockSuccessResponse = {\r\n  //     status: 200,\r\n  //     statusText: 'OK',\r\n  //     response: 'loading',\r\n  //     sendAsJson: false\r\n  // };\r\n  //   var el = document.createElement('div');\r\n  //     el.id = \"divid\";\r\n  //     document.body.appendChild(el);\r\n  //     const mockJsonPromise = Promise.resolve(mockSuccessResponse); \r\n  //       const mockFetchPromise = Promise.resolve({ \r\n  //         json: () => mockJsonPromise,\r\n  //       });\r\n  //   localStorage.setItem('sessionTimeOut',\"true\");\r\n  //   jest.spyOn(global, 'fetch').mockImplementation(() => mockFetchPromise); \r\n  //   const component = mount(<FrameHolder  url=\"/asset-holder/\" payload=\"{}\" pageentry=\"/\" \r\n  //   parentCallback={()=> {}} onFrameMessage={()=>{}}/>,\r\n  //   { attachTo: el });\r\n  //   window.getContext = ()=>{return {'context' : {'message':'share context'}}};\r\n  //   component.instance().handleFrameMessage('Message');\r\n  //   component.state().importurl = \"/asset-holder/\";\r\n  //   component.instance().componentDidUpdate(\"/asset-holder/\");\r\n  // });\r\n\r\n});","/* \r\n *  *************************************************\r\n *   BH [Highly] Confidential\r\n *   [Unpublished] Copyright 2020.  Baker Hughes\r\n *  \r\n *   NOTICE:  All information contained herein is, and remains the property of Baker Hughes, and/or\r\n *   its affiliates.  The intellectual and technical concepts contained herein are proprietary to Baker Hughes\r\n *   and/or its affiliates and may be covered by patents, copyrights, and/or trade secrets.  Dissemination of this information or\r\n *   reproduction of this material is strictly forbidden unless prior written permission is obtained from Baker Hughes.\r\n *  **************************************************\r\n *  \r\n */\r\n\r\nimport { configure } from 'enzyme';\r\nimport Adapter from 'enzyme-adapter-react-16';\r\n// import Adapter from '@wojtekmaj/enzyme-adapter-react-17'; //TODO: upgrade to official version once available\r\nconfigure({ adapter: new Adapter() });\r\n\r\nconst localStorageMock = {\r\n    getItem: jest.fn(),\r\n    setItem: jest.fn(),\r\n    clear: jest.fn()\r\n  };\r\n  global.localStorage = localStorageMock;\r\n  jest.setTimeout(30000);"],"sourceRoot":""}