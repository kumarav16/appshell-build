{"version":3,"sources":["components/Feedback/ScreenCaptures.test.js","components/Feedback/ScreenCaptures.js"],"names":["describe","it","component","shallow","expect","toMatchSnapshot","withTranslation","asd","onEndCapture","children","t","useState","on","setOn","startX","setStartX","startY","setStartY","endX","setEndX","endY","setEndY","crossHairsTop","setCrossHairsTop","crossHairsLeft","setCrossHairsLeft","isMouseDown","setIsMouseDown","windowWidth","setWindowWidth","windowHeight","setWindowHeight","borderWidth","setBorderWidth","cropPositionTop","setCropPositionTop","cropPositionLeft","setCropPositionLeft","cropWidth","setCropWidth","cropHeigth","setCropHeigth","handleWindowResize","window","innerWidth","document","documentElement","clientWidth","body","innerHeight","clientHeight","useEffect","addEventListener","removeEventListener","handStartCapture","handleClickTakeScreenShot","querySelector","contentWindow","html2canvas","foreignObjectRendering","then","canvas","croppedCanvas","cropCanvas","displayScreenShot","toDataURL","list","getElementById","hasChildNodes","removeChild","firstChild","createElement","croppedCanvasContext","getContext","width","height","offsetLeft","offsetTop","drawImage","renderChild","onMouseMove","e","clientX","clientY","isStartTop","isStartBottom","isStartLeft","isStartRight","isStartTopLeft","isStartTopRight","isStartBottomLeft","isStartBottomRight","newBorderWidth","onMouseDown","prevState","onMouseUp","className","style","id","left","top"],"mappings":"wMASAA,SAAS,kBAAkB,WAEvBC,GAAG,4CAA4C,WAC3C,IAeMC,EAAYC,kBAAQ,cAAC,UAAc,eAfZ,CACzB,QAAW,CACP,oBAAuB,SACvB,YAAe,SACf,uBAA0B,SAC1B,4BAA+B,SAC/B,cAAiB,SACjB,kBAAqB,SACrB,MAAS,SACT,cAAiB,SACjB,iBAAoB,SACpB,MAAS,2BAEb,YAAc,MAGlBC,OAAOF,GAAWG,iBACtB,GAaJ,G,2JCyKeC,yBA7MQ,SAAH,GAAS,EAAHC,IAAqC,IAAhCC,EAAY,EAAZA,aAAcC,EAAQ,EAARA,SAASC,EAAC,EAADA,EACpD,EAAoBC,oBAAS,GAAM,mBAA5BC,EAAE,KAAEC,EAAK,KAChB,EAA4BF,mBAAS,GAAE,mBAAhCG,EAAM,KAAEC,EAAS,KACxB,EAA4BJ,mBAAS,GAAE,mBAAhCK,EAAM,KAAEC,EAAS,KACxB,EAAwBN,mBAAS,GAAE,mBAA5BO,EAAI,KAAEC,EAAO,KACpB,EAAwBR,mBAAS,GAAE,mBAA5BS,EAAI,KAAEC,EAAO,KACpB,EAA0CV,mBAAS,GAAE,mBAA9CW,EAAa,KAAEC,EAAgB,KACtC,EAA4CZ,mBAAS,GAAE,mBAAhDa,EAAc,KAAEC,EAAiB,KACxC,EAAsCd,oBAAS,GAAM,mBAA9Ce,EAAW,KAAEC,EAAc,KAClC,EAAsChB,mBAAS,GAAE,mBAA1CiB,EAAW,KAAEC,EAAc,KAClC,EAAwClB,mBAAS,GAAE,mBAA5CmB,EAAY,KAAEC,EAAe,KACpC,EAAsCpB,mBAAS,GAAE,mBAA1CqB,EAAW,KAAEC,EAAc,KAClC,EAA8CtB,mBAAS,GAAE,oBAAlDuB,GAAe,MAAEC,GAAkB,MAC1C,GAAgDxB,mBAAS,GAAE,qBAApDyB,GAAgB,MAAEC,GAAmB,MAC5C,GAAkC1B,mBAAS,GAAE,qBAAtC2B,GAAS,MAAEC,GAAY,MAC9B,GAAoC5B,mBAAS,GAAE,qBAAxC6B,GAAU,MAAEC,GAAa,MAG1BC,GAAqB,WACzBb,EACEc,OAAOC,YACLC,SAASC,gBAAgBC,aACzBF,SAASG,KAAKD,aAElBhB,EACEY,OAAOM,aACLJ,SAASC,gBAAgBI,cACzBL,SAASG,KAAKE,aAEpB,EAEAC,qBAAU,WAIR,OAHAT,KACAC,OAAOS,iBAAiB,SAAUV,IAE3B,WACLC,OAAOU,oBAAoB,SAAUX,GACvC,CACF,IAEA,IAAMY,GAAmB,WAAH,OAASzC,GAAM,EAAM,EAiFrC0C,GAA4B,WAChC,IAAMP,EAAOH,SAASW,cAAc,oBAAoBC,cAAcZ,SAASG,KAC/EU,IAAYV,EAAK,CACfW,wBAAwB,IAEvBC,MAAK,SAACC,GACL,IAAIC,EAAgBC,GAAWF,GAC/BG,GAAkBF,EACpB,IACFvC,EAAiB,GACjBE,EAAkB,EACpB,EAEMuC,GAAoB,SAACF,GACzB,GAAGxB,GAAY,GAAKE,GAAa,EAC/BhC,EAAasD,EAAcG,kBAGvB,IADA,IAAMC,EAAOrB,SAASsB,eAAe,oBAC9BD,EAAKE,iBACZF,EAAKG,YAAYH,EAAKI,WAG9B,EAGMP,GAAa,SAACF,GAClB,IAAIC,EAAgBjB,SAAS0B,cAAc,UACrCC,EAAuBV,EAAcW,WAAW,MAEpDX,EAAcY,MAAQpC,GACtBwB,EAAca,OAASnC,GAGzB,IAAIoC,EAAa/B,SAASsB,eAAe,iBAAiBS,WACtDC,EAAYhC,SAASsB,eAAe,iBAAiBU,UAavD,OAXAL,EAAqBM,UACnBjB,EACAzB,GAAmBwC,EACnB1C,GAAkB2C,EAClBvC,GACAE,GACA,EACA,EACAF,GACAE,IAEKsB,CACX,EAEMiB,GAAc,WAKlB,MAAwB,oBAAbtE,EAAgCA,EAJ7B,CACZF,IAAK+C,KAKA7C,CACT,EAEA,OAAKG,EAGH,eAAC,IAAI,CACHoE,YA/IoB,SAACC,GACvB9C,GAAmBnB,GACnBqB,GAAoBvB,GACpBK,EAAQ8D,EAAEC,SACV7D,EAAQ4D,EAAEE,SACV,IAAMC,EAAahE,GAAQJ,EACrBqE,EAAgBjE,GAAQJ,EACxBsE,EAAcpE,GAAQJ,EACtByE,EAAerE,GAAQJ,EACvB0E,EAAiBJ,GAAcE,EAC/BG,EAAkBL,GAAcG,EAChCG,EAAoBL,GAAiBC,EACrCK,EAAqBN,GAAiBE,EACxCK,EAAiB5D,EACrBO,GAAa,GACbE,GAAc,GAEVf,IACE8D,IACFI,EAAc,UAAM5E,EAAM,cAAMY,EAAcV,EAAI,cAChDY,EAAeV,EAAI,cACfN,EAAM,MACZyB,GAAarB,EAAOJ,GACpB2B,GAAcrB,EAAOJ,IAKnByE,IACFG,EAAc,UAAM5E,EAAM,cAAMY,EAAcd,EAAM,cAClDgB,EAAeV,EAAI,cACfF,EAAI,MACVqB,GAAazB,EAASI,GACtBuB,GAAcrB,EAAOJ,GACrBqB,GAAoBnB,IAGlBwE,IACFE,EAAc,UAAMxE,EAAI,cAAMQ,EAAcV,EAAI,cAC9CY,EAAed,EAAM,cACjBF,EAAM,MACZyB,GAAarB,EAAOJ,GACpB2B,GAAczB,EAASI,GACvBe,GAAmBf,IAGjBuE,IACFC,EAAc,UAAMxE,EAAI,cAAMQ,EAAcd,EAAM,cAChDgB,EAAed,EAAM,cACjBE,EAAI,MACVqB,GAAazB,EAASI,GACtBuB,GAAczB,EAASI,GACvBiB,GAAoBnB,GACpBiB,GAAmBf,KAGvBG,EAAiB0D,EAAEE,SACnB1D,EAAkBwD,EAAEC,SACpBjD,EAAe2D,EACjB,EAqFIC,YAnFoB,SAACZ,GACvBlE,EAAUkE,EAAEC,SACZjE,EAAUgE,EAAEE,SACZhD,GAAmBnB,GACnBqB,GAAoBvB,GACpBa,GAAe,GACfM,GACE,SAAC6D,GAAS,gBAAQA,EAAUlE,YAAW,cAAMkE,EAAUhE,aAAY,QAEvE,EA2EIiE,UAzEkB,SAACd,GACrB1B,KACA1C,GAAM,GACNc,GAAe,GACfM,EAAe,EACjB,EAoE6B,UAExB8C,KACD,cAAC,IAAI,CACHiB,UAAS,kBAAatE,GAAe,gBACrCuE,MAAO,CAAEjE,eACTkE,GAAG,sBAEL,qBACIF,UAAU,aACVC,MAAO,CAAEE,KAAM3E,EAAiB,KAAM4E,IAAK9E,EAAgB,MAAO,SAEpE,qBAAK0E,UAAU,wBAAuB,SAAEtF,EAAE,8BAlBhCqE,IAsBlB,G","file":"static/js/39.d970a12b.chunk.js","sourcesContent":["import React from 'react';\r\nimport ScreenCaptures from './ScreenCaptures'\r\nimport { shallow, mount } from 'enzyme';\r\nimport { render, fireEvent } from '@testing-library/react';\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"./SpecificSnapshot.css\";\r\nimport { withTranslation } from 'react-i18next';\r\n\r\n\r\ndescribe('ScreenCaptures', () => {\r\n\r\n    it('verify for ScreenCaptures props children', () => {\r\n        const CommonComponentProps = {\r\n            \"classes\": {\r\n                \"ThankuFeedbackTitle\": \"jss218\",\r\n                \"closeButton\": \"jss219\",\r\n                \"ThankuFeedbackLogTitle\": \"jss220\",\r\n                \"ThankuFeedbackDialogcontent\": \"jss221\",\r\n                \"Thankucontent\": \"jss222\",\r\n                \"Thankucontenttext\": \"jss223\",\r\n                \"media\": \"jss224\",\r\n                \"thankutopicon\": \"jss225\",\r\n                \"thankutopiconbtn\": \"jss226\",\r\n                \"paper\": \"undefined jss280 jss260\"\r\n            },\r\n            \"openThanku\": true\r\n        };\r\n        const component = shallow(<ScreenCaptures {...CommonComponentProps} />);\r\n        expect(component).toMatchSnapshot();\r\n    });\r\n\r\n    // it(\"test onMouseMove  \", () => {\r\n    //     const setCropPositionTop = jest.fn();\r\n    //     React.useState = jest.fn(() => [\"\", setCropPositionTop]);\r\n    //     const wrapper = mount(<ScreenCaptures onEndCapture={jest.fn()} children={jest.fn()}></ScreenCaptures>);\r\n    //     const component = wrapper.find(\"ScreenCaptures\").at(0);\r\n    //     const FirstGrids = component.find(Grid).at(0);\r\n    //     expect(FirstGrids.length).toBe(1);\r\n    //     console.log(\"========\", component.debug());\r\n    //     const component = wrapper.find(\"Grid\").props().onMouseMove();\r\n    //     expect(setCropPositionTop).toHaveBeenCalled();\r\n    // });\r\n});\r\n\r\n\r\n\r\n\r\n","import React, { useEffect, useState } from \"react\";\r\nimport html2canvas from \"html2canvas\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport \"./SpecificSnapshot.css\";\r\nimport { withTranslation } from 'react-i18next';\r\n\r\nconst ScreenCaptures = ({ asd, onEndCapture, children,t }) => {\r\n  const [on, setOn] = useState(false);\r\n  const [startX, setStartX] = useState(0);\r\n  const [startY, setStartY] = useState(0);\r\n  const [endX, setEndX] = useState(0);\r\n  const [endY, setEndY] = useState(0);\r\n  const [crossHairsTop, setCrossHairsTop] = useState(0);\r\n  const [crossHairsLeft, setCrossHairsLeft] = useState(0);\r\n  const [isMouseDown, setIsMouseDown] = useState(false);\r\n  const [windowWidth, setWindowWidth] = useState(0);\r\n  const [windowHeight, setWindowHeight] = useState(0);\r\n  const [borderWidth, setBorderWidth] = useState(0);\r\n  const [cropPositionTop, setCropPositionTop] = useState(0);\r\n  const [cropPositionLeft, setCropPositionLeft] = useState(0);\r\n  const [cropWidth, setCropWidth] = useState(0);\r\n  const [cropHeigth, setCropHeigth] = useState(0);\r\n  \r\n\r\n  const handleWindowResize = () => {\r\n    setWindowWidth(\r\n      window.innerWidth ||\r\n        document.documentElement.clientWidth ||\r\n        document.body.clientWidth\r\n    );\r\n    setWindowHeight(\r\n      window.innerHeight ||\r\n        document.documentElement.clientHeight ||\r\n        document.body.clientHeight\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    handleWindowResize();\r\n    window.addEventListener(\"resize\", handleWindowResize);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", handleWindowResize);\r\n    };\r\n  });\r\n\r\n  const handStartCapture = () => setOn(true);\r\n/* istanbul ignore next */\r\n  const handleMouseMove = (e) => {\r\n    setCropPositionTop(startY);\r\n    setCropPositionLeft(startX);\r\n    setEndX(e.clientX);\r\n    setEndY(e.clientY);\r\n    const isStartTop = endY >= startY;\r\n    const isStartBottom = endY <= startY;\r\n    const isStartLeft = endX >= startX;\r\n    const isStartRight = endX <= startX;\r\n    const isStartTopLeft = isStartTop && isStartLeft;\r\n    const isStartTopRight = isStartTop && isStartRight;\r\n    const isStartBottomLeft = isStartBottom && isStartLeft;\r\n    const isStartBottomRight = isStartBottom && isStartRight;\r\n    let newBorderWidth = borderWidth;\r\n    setCropWidth(0);\r\n    setCropHeigth(0);\r\n\r\n    if (isMouseDown) {\r\n      if (isStartTopLeft) {\r\n        newBorderWidth = `${startY}px ${windowWidth - endX}px ${\r\n          windowHeight - endY\r\n        }px ${startX}px`;\r\n        setCropWidth(endX - startX);\r\n        setCropHeigth(endY - startY);\r\n        // setCropWidth(endX);\r\n        // setCropHeigth(endY);\r\n      }\r\n\r\n      if (isStartTopRight) {\r\n        newBorderWidth = `${startY}px ${windowWidth - startX}px ${\r\n          windowHeight - endY\r\n        }px ${endX}px`;\r\n        setCropWidth(startX - endX);\r\n        setCropHeigth(endY - startY);\r\n        setCropPositionLeft(endX);\r\n      }\r\n\r\n      if (isStartBottomLeft) {\r\n        newBorderWidth = `${endY}px ${windowWidth - endX}px ${\r\n          windowHeight - startY\r\n        }px ${startX}px`;\r\n        setCropWidth(endX - startX);\r\n        setCropHeigth(startY - endY);\r\n        setCropPositionTop(endY);\r\n      }\r\n\r\n      if (isStartBottomRight) {\r\n        newBorderWidth = `${endY}px ${windowWidth - startX}px ${\r\n          windowHeight - startY\r\n        }px ${endX}px`;\r\n        setCropWidth(startX - endX);\r\n        setCropHeigth(startY - endY);\r\n        setCropPositionLeft(endX);\r\n        setCropPositionTop(endY);\r\n      }\r\n    }\r\n    setCrossHairsTop(e.clientY);\r\n    setCrossHairsLeft(e.clientX);\r\n    setBorderWidth(newBorderWidth);\r\n  };\r\n\r\n  const handleMouseDown = (e) => {\r\n    setStartX(e.clientX);\r\n    setStartY(e.clientY);\r\n    setCropPositionTop(startY);\r\n    setCropPositionLeft(startX);\r\n    setIsMouseDown(true);\r\n    setBorderWidth(\r\n      (prevState) => `${prevState.windowWidth}px ${prevState.windowHeight}px`\r\n    );\r\n  };\r\n\r\n  const handleMouseUp = (e) => {\r\n    handleClickTakeScreenShot();\r\n    setOn(false);\r\n    setIsMouseDown(false);\r\n    setBorderWidth(0);\r\n  };\r\n/* istanbul ignore next */\r\n  const handleClickTakeScreenShot = () => { \r\n    const body = document.querySelector(\".main-app iframe\").contentWindow.document.body;\r\n    html2canvas(body,{\r\n      foreignObjectRendering: true\r\n    })\r\n      .then((canvas) => {\r\n        let croppedCanvas = cropCanvas(canvas);\r\n        displayScreenShot(croppedCanvas);\r\n      });\r\n    setCrossHairsTop(0);\r\n    setCrossHairsLeft(0);\r\n  };\r\n\r\n  const displayScreenShot = (croppedCanvas) => {\r\n    if(cropWidth > 1 && cropHeigth > 1) {\r\n      onEndCapture(croppedCanvas.toDataURL());\r\n    } else {\r\n          const list = document.getElementById(\"completesnapshot\");\r\n          while (list.hasChildNodes()) {\r\n          list.removeChild(list.firstChild);\r\n      } \r\n    }\r\n  }\r\n\r\n\r\n  const cropCanvas = (canvas) => {\r\n    let croppedCanvas = document.createElement(\"canvas\");\r\n      let croppedCanvasContext = croppedCanvas.getContext(\"2d\");\r\n\r\n      croppedCanvas.width = cropWidth;\r\n      croppedCanvas.height = cropHeigth;\r\n\r\n    //Getting left and top measurements dynamically\r\n    let offsetLeft = document.getElementById('iframeWrapper').offsetLeft;\r\n    let offsetTop = document.getElementById('iframeWrapper').offsetTop;\r\n\r\n      croppedCanvasContext.drawImage(\r\n        canvas,\r\n        cropPositionLeft - offsetLeft,\r\n        cropPositionTop - offsetTop,\r\n        cropWidth,\r\n        cropHeigth,\r\n        0,\r\n        0,\r\n        cropWidth,\r\n        cropHeigth\r\n      );\r\n      return croppedCanvas;\r\n  }\r\n\r\n  const renderChild = () => {\r\n    const props = {\r\n      asd: handStartCapture\r\n    };\r\n/* istanbul ignore else */\r\n    if (typeof children === \"function\") return children(props);\r\n\r\n    return children;\r\n  };\r\n\r\n  if (!on) return renderChild();\r\n\r\n  return (\r\n    <Grid\r\n      onMouseMove={handleMouseMove}\r\n      onMouseDown={handleMouseDown}\r\n      onMouseUp={handleMouseUp}\r\n    >\r\n      {renderChild()}\r\n      <Grid\r\n        className={`overlay ${isMouseDown && \"highlighting\"}`}\r\n        style={{ borderWidth }}\r\n        id=\"ScreenCaptureWrap\"\r\n      />\r\n      <div\r\n          className=\"crosshairs\"\r\n          style={{ left: crossHairsLeft + \"px\", top: crossHairsTop + \"px\" }}\r\n      >\r\n        <div className=\"crosshairsTooltiptext\">{t(\"FeedbackDragToolTip\")}</div>\r\n      </div>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default withTranslation()(ScreenCaptures);\r\n\r\n"],"sourceRoot":""}