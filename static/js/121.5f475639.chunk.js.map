{"version":3,"sources":["../node_modules/@baker-hughes-central-design/ui-toolkit/dist/esm/bh-badge.entry.js"],"names":["BhBadge","hostRef","registerInstance","this","position","label","type","color","console","warn","theme","h","Host","class","isFluid","offset","icon","style"],"mappings":"2MAIMA,EAAO,WACX,WAAYC,GAAS,oBACnBC,YAAiBC,KAAMF,GAQvBE,KAAKC,SAAW,aAQhBD,KAAKE,MAAQ,GAQbF,KAAKG,KAAO,OACd,CA+BC,OA/BA,gDACD,WACE,GAAIH,KAAKI,MAEP,OADAC,QAAQC,KAAK,2HACLN,KAAKI,OACX,IAAK,OACHJ,KAAKO,MAAQ,UACb,MACF,IAAK,OACHP,KAAKO,MAAQ,QACb,MACF,IAAK,SACHP,KAAKO,MAAQ,SACb,MACF,IAAK,QACHP,KAAKO,MAAQ,UAIrB,GAAC,oBACD,WACE,OAAQC,YAAEC,IAAM,CAAEC,MAAO,YAAF,OAAgC,aAAlBV,KAAKC,SAAuB,UACxDD,KAAKW,QAAU,iBAAmB,YACrC,KAA0B,aAAlBX,KAAKC,UAA2BO,YAAE,OAAQ,MAAOA,YAAE,MAAO,CAAEE,MAAO,uBAAyBF,YAAE,OAAQ,CAAEE,MAAO,oDAAF,OAAqE,YAAfV,KAAKO,OACnK,UAAfP,KAAKO,OACU,YAAfP,KAAKO,OACU,WAAfP,KAAKO,MACHP,KAAKO,MACL,GAAE,YAAsB,aAAlBP,KAAKC,SAA0B,QAAUD,KAAKG,KAAI,YAAsB,aAAlBH,KAAKC,SAAuB,mBAC5ED,KAAKY,OAAS,WAAH,OAAcZ,KAAKY,QAAW,UACrD,GAAE,YAAKZ,KAAKa,MAASb,KAAKE,MAAmB,GAAX,YAAoBF,KAAKa,MAAQb,KAAKE,OAASF,KAAKE,MAAOF,KAAKa,MAASL,YAAE,IAAK,CAAEE,MAAO,gFAAkFV,KAAKa,QAC1N,KAAC,EA1DU,GA4DbhB,EAAQiB,MA9DW,q6E","file":"static/js/121.5f475639.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-c0304f12.js';\n\nconst bhBadgeCss = \".bh-badge.appended{display:table;position:relative}.bh-badge.appended-fluid{display:block;position:relative}.bh-badge__container{display:table}.bh-badge__label{display:flex;min-width:24px;height:24px;background-color:var(--color-fill-semantic-success-default);border:1px solid var(--color-fill-semantic-success-default);border-radius:12px;color:var(--color-text-common-inverse-primary);align-content:center;align-items:center;box-sizing:border-box;flex-wrap:wrap;flex-direction:row;justify-content:center;padding:0 calc(var(--spacing-padding-xsmall) - 1px);position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;pointer-events:none}.bh-badge__label.hidden{display:none}.bh-badge__label.appended{right:var(--badge-count-position-right);top:var(--badge-count-position-top)}.bh-badge__label.appended.offset--medium{right:var(--badge-count-position-right);top:var(--badge-count-position-top)}.bh-badge__label.appended.offset--small{right:-6px;top:-6px}.bh-badge__icon{position:absolute;top:2px}.bh-badge__label.appended{position:absolute}.bh-badge__label.success.solid{background-color:var(--color-fill-semantic-success-default);border-color:var(--color-fill-semantic-success-default);color:var(--color-text-common-inverse-primary)}.bh-badge__label.neutral.solid{background-color:var(--color-fill-semantic-neutral-default);border-color:var(--color-fill-semantic-neutral-default);color:var(--color-text-common-primary)}.bh-badge__label.error.solid{background-color:var(--color-fill-semantic-error-default);border-color:var(--color-fill-semantic-error-default);color:var(--color-text-common-inverse-primary)}.bh-badge__label.accent.solid{background-color:var(--color-fill-semantic-accent-default);border-color:var(--color-fill-semantic-accent-default);color:var(--color-text-common-inverse-primary)}.bh-badge__label.success.outlined{background-color:transparent;border-color:var(--color-fill-semantic-success-default);color:var(--color-text-common-primary)}.bh-badge__label.neutral.outlined{background-color:transparent;border-color:var(--color-fill-semantic-neutral-default);color:var(--color-text-common-primary)}.bh-badge__label.error.outlined{background-color:transparent;border-color:var(--color-fill-semantic-error-default);color:var(--color-text-common-primary)}.bh-badge__label.accent.outlined{background-color:transparent;border-color:var(--color-fill-semantic-accent-default);color:var(--color-text-common-primary)}\";\n\nconst BhBadge = class {\r\n  constructor(hostRef) {\r\n    registerInstance(this, hostRef);\r\n    /**\r\n     * position\r\n     * Valid positions are: 'standalone' | 'appended', default is 'standalone'. Defines if the badge is standalone, or appended to an element\r\n     * DOM Attribute: position\r\n     * Usage: <bh-badge position='standalone' />\r\n     * Optional\r\n     */\r\n    this.position = 'standalone';\r\n    /**\r\n     * label\r\n     * Valid only when the position is 'standalone', defines the label copy inside the badge.\r\n     * DOM Attribute: label\r\n     * Usage: <bh-badge label='1' />\r\n     * Optional\r\n     */\r\n    this.label = '';\r\n    /**\r\n     * type\r\n     * Valid options are: 'solid' | 'outlined', default is 'solid'. Defines the badge appearance style.\r\n     * DOM Attribute: type\r\n     * Usage: <bh-badge type='solid' />\r\n     * Optional\r\n     */\r\n    this.type = 'solid';\r\n  }\r\n  componentWillRender() {\r\n    if (this.color) {\r\n      console.warn('bh-badge: Prop \"color\" is deprecated and will not be supported in the future releases. Please use \"theme\" prop instead.');\r\n      switch (this.color) {\r\n        case 'teal':\r\n          this.theme = 'success';\r\n          break;\r\n        case 'rose':\r\n          this.theme = 'error';\r\n          break;\r\n        case 'purple':\r\n          this.theme = 'accent';\r\n          break;\r\n        case 'earth':\r\n          this.theme = 'neutral';\r\n          break;\r\n      }\r\n    }\r\n  }\r\n  render() {\r\n    return (h(Host, { class: `bh-badge ${this.position === 'appended'\r\n        ? `${this.isFluid ? 'appended-fluid' : 'appended'}`\r\n        : ''}` }, this.position === 'appended' && h(\"slot\", null), h(\"div\", { class: 'bh-badge__container' }, h(\"span\", { class: `bh-badge__label typography--body-small-semi-bold ${this.theme === 'success' ||\r\n        this.theme === 'error' ||\r\n        this.theme === 'neutral' ||\r\n        this.theme === 'accent'\r\n        ? this.theme\r\n        : ''} ${this.position === 'appended' ? 'solid' : this.type} ${this.position === 'appended'\r\n        ? `appended ${this.offset ? `offset--${this.offset}` : 'medium'}`\r\n        : ''} ${!this.icon && !this.label ? 'hidden' : ''}` }, !this.icon && this.label && this.label, this.icon && (h(\"i\", { class: 'material-icons material-icons-outlined typography--icon-small bh-badge__icon' }, this.icon))))));\r\n  }\r\n};\r\nBhBadge.style = bhBadgeCss;\n\nexport { BhBadge as bh_badge };\n"],"sourceRoot":""}